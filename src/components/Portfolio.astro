---
import { Carousel } from "astro-carousel";
import type { ComponentProps } from "astro/types";
import { Image } from "astro:assets";
import { slides } from "../data/slides";
const images = slides.map((s) => ({
  src: s.src,
  alt: s.alt,
  width: s.src.width,
  height: s.src.height,
  widths: [400, 800, 1200],
})) as ComponentProps<typeof Carousel>["images"];
---

<section id="portfolio" class="py-16 sm:py-20">
  <div class="mx-auto w-full max-w-[1170px] px-5" data-portfolio>
    <h2 class="text-3xl sm:text-4xl m-0 mb-6 text-main-rose">PORTFOLIO</h2>

    <!-- Carousel viewport -->
    <div class="overflow-hidden" data-viewport>
      <!-- Carousel track -->
      <div
        id="carouselTargetList"
        class="flex gap-7 transition-transform duration-300 will-change-transform"
        data-track
      >
        {/* Slides */}
        {
          slides.map((s, i) => (
            <article
              class="overflow-hidden flex flex-col gap-2 hover:-translate-y-1 transition-transform duration-200"
              data-slide
            >
              <div class="aspect-[4/5] bg-[#f2f2f2]">
                <a href={`/?image=${i}`} data-carousel-index={i}>
                  <Image
                    src={s.src}
                    alt={s.alt}
                    widths={[400, 800, 1200]}
                    sizes="(max-width: 1024px) 50vw, 25vw"
                    class="w-full h-full object-cover"
                    loading="eager"
                    fetchpriority={i < 4 ? "high" : "auto"}
                    decoding="async"
                  />
                </a>
              </div>
              <div class="text-[12px] text-[#7c7c7c] px-3 pb-3 tracking-[0.08em]">
                {s.code}
              </div>
            </article>
          ))
        }
      </div>
    </div>

    <!-- Controls -->
    <div class="flex gap-3 mt-4 justify-end">
      <button
        type="button"
        class="w-10 h-10 rounded-full grid place-items-center bg-main-white text-main-rose border border-main-rose cursor-pointer hover:bg-main-rose transition-colors duration-200 ease-in-out hover:text-main-white focus:outline-none select-none"
        aria-label="Previous"
        title="Previous"
        data-prev
      >
        ←
      </button>
      <button
        type="button"
        class="w-10 h-10 rounded-full grid place-items-center bg-main-white text-main-rose border border-main-rose select-none cursor-pointer transition-colors duration-200 ease-in-out hover:bg-main-rose hover:text-main-white focus:outline-none"
        aria-label="Next"
        title="Next"
        data-next
      >
        →
      </button>
    </div>

    <script is:inline>
      const root = document.querySelector("[data-portfolio]");
      const viewport = root?.querySelector("[data-viewport]");
      const track = root?.querySelector("[data-track]");
      const slides = track
        ? Array.from(track.querySelectorAll("[data-slide]"))
        : [];
      const prevBtn = root?.querySelector("[data-prev]");
      const nextBtn = root?.querySelector("[data-next]");

      if (root && viewport && track && slides.length) {
        let currentPage = 0;

        const getSlidesPerView = () => {
          const w = window.innerWidth;
          if (w >= 1024) return 4; // lg
          if (w >= 640) return 3; // sm
          return 2; // base
        };

        const applyLayout = () => {
          const vpWidth = viewport.getBoundingClientRect().width;
          const styles = getComputedStyle(track);
          const gap = parseFloat(styles.columnGap || styles.gap || "0");
          const spp = getSlidesPerView();
          const slideWidth = (vpWidth - gap * (spp - 1)) / spp;
          slides.forEach((el) => {
            el.style.flex = "0 0 auto";
            el.style.width = `${Math.max(0, slideWidth)}px`;
          });
          // Clamp current page in case the count changed
          const totalPages = Math.max(1, Math.ceil(slides.length / spp));
          currentPage = Math.min(currentPage, totalPages - 1);
          // Snap exactly to the first slide of the page
          const pageStartIndex = currentPage * spp;
          const baseEl = slides[pageStartIndex];
          if (baseEl) {
            const baseLeft = baseEl.getBoundingClientRect().left;
            const trackLeft = track.getBoundingClientRect().left;
            const offset = baseLeft - trackLeft;
            track.style.transform = `translateX(-${offset}px)`;
          }
        };

        const next = () => {
          const spp = getSlidesPerView();
          const totalPages = Math.ceil(slides.length / spp);
          currentPage = (currentPage + 1) % totalPages;
          const pageStartIndex = currentPage * spp;
          const baseEl = slides[pageStartIndex];
          if (baseEl) {
            const baseLeft = baseEl.getBoundingClientRect().left;
            const trackLeft = track.getBoundingClientRect().left;
            const offset = baseLeft - trackLeft;
            track.style.transform = `translateX(-${offset}px)`;
          }
        };

        const prev = () => {
          const spp = getSlidesPerView();
          const totalPages = Math.ceil(slides.length / spp);
          currentPage = (currentPage - 1 + totalPages) % totalPages;
          const pageStartIndex = currentPage * spp;
          const baseEl = slides[pageStartIndex];
          if (baseEl) {
            const baseLeft = baseEl.getBoundingClientRect().left;
            const trackLeft = track.getBoundingClientRect().left;
            const offset = baseLeft - trackLeft;
            track.style.transform = `translateX(-${offset}px)`;
          }
        };

        // Bind events
        nextBtn?.addEventListener("click", next);
        prevBtn?.addEventListener("click", prev);

        // Handle resize
        let resizeRaf = 0;
        const onResize = () => {
          cancelAnimationFrame(resizeRaf);
          resizeRaf = requestAnimationFrame(applyLayout);
        };
        window.addEventListener("resize", onResize);

        // Initial layout
        applyLayout();

        // Clean up on page navigation (Astro islands not used here, but safe)
        document.addEventListener("astro:after-swap", () => {
          window.removeEventListener("resize", onResize);
          nextBtn?.removeEventListener("click", next);
          prevBtn?.removeEventListener("click", prev);
        });
      }
    </script>
  </div>
  <!-- Modal carousel overlay -->

  <Carousel images={images} color="#3e5348" />
</section>

<style>
  :global(.carousel),
  :global(.slides) {
    z-index: 21 !important;
  }
</style>
